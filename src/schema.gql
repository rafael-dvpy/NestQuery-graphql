# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Student {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  key: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type StudentDeleteResponse {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  key: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type StudentConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Student!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type StudentAggregateGroupBy {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  key: String
}

type StudentCountAggregate {
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
  name: Int
  key: Int
}

type StudentMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  key: String
}

type StudentMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
  key: String
}

type Query {
  student(
    """The id of the record to find."""
    id: ID!
  ): Student
  students(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: StudentFilter = {}

    """Specify to sort results."""
    sorting: [StudentSort!] = []
  ): StudentConnection!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input StudentFilter {
  and: [StudentFilter!]
  or: [StudentFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input StudentSort {
  field: StudentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StudentSortFields {
  createdAt
  updatedAt
  deletedAt
  name
  key
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneStudent(input: CreateOneStudentInput!): Student!
  createManyStudents(input: CreateManyStudentsInput!): [Student!]!
  updateOneStudent(input: UpdateOneStudentInput!): Student!
  updateManyStudents(input: UpdateManyStudentsInput!): UpdateManyResponse!
  deleteOneStudent(input: DeleteOneStudentInput!): StudentDeleteResponse!
  deleteManyStudents(input: DeleteManyStudentsInput!): DeleteManyResponse!
}

input CreateOneStudentInput {
  """The record to create"""
  student: CreateStudentInput!
}

input CreateStudentInput {
  name: String!
  key: String!
}

input CreateManyStudentsInput {
  """Array of records to create"""
  students: [CreateStudentInput!]!
}

input UpdateOneStudentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStudentInput!
}

input UpdateStudentInput {
  name: String
  key: String
  id: String!
}

input UpdateManyStudentsInput {
  """Filter used to find fields to update"""
  filter: StudentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStudentInput!
}

input StudentUpdateFilter {
  and: [StudentUpdateFilter!]
  or: [StudentUpdateFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}

input DeleteOneStudentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyStudentsInput {
  """Filter to find records to delete"""
  filter: StudentDeleteFilter!
}

input StudentDeleteFilter {
  and: [StudentDeleteFilter!]
  or: [StudentDeleteFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  key: StringFieldComparison
}